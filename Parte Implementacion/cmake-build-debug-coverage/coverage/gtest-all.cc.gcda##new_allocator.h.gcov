        -:    0:Source:/usr/lib/gcc/x86_64-pc-cygwin/10/include/c++/ext/new_allocator.h
        -:    0:Graph:/cygdrive/c/Users/vAsmad/CLionProjects/TPS/TPI_toroide/cmake-build-debug-coverage/lib/googletest-master/googlemock/gtest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/cygdrive/c/Users/vAsmad/CLionProjects/TPS/TPI_toroide/cmake-build-debug-coverage/lib/googletest-master/googlemock/gtest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2020 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file ext/new_allocator.h
        -:   26: *  This file is a GNU extension to the Standard C++ Library.
        -:   27: */
        -:   28:
        -:   29:#ifndef _NEW_ALLOCATOR_H
        -:   30:#define _NEW_ALLOCATOR_H 1
        -:   31:
        -:   32:#include <bits/c++config.h>
        -:   33:#include <new>
        -:   34:#include <bits/functexcept.h>
        -:   35:#include <bits/move.h>
        -:   36:#if __cplusplus >= 201103L
        -:   37:#include <type_traits>
        -:   38:#endif
        -:   39:
        -:   40:namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
        -:   41:{
        -:   42:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   43:
        -:   44:  /**
        -:   45:   *  @brief  An allocator that uses global new, as per [20.4].
        -:   46:   *  @ingroup allocators
        -:   47:   *
        -:   48:   *  This is precisely the allocator defined in the C++ Standard.
        -:   49:   *    - all allocation calls operator new
        -:   50:   *    - all deallocation calls operator delete
        -:   51:   *
        -:   52:   *  @tparam  _Tp  Type of allocated object.
        -:   53:   */
        -:   54:  template<typename _Tp>
        -:   55:    class new_allocator
        -:   56:    {
        -:   57:    public:
        -:   58:      typedef _Tp        value_type;
        -:   59:      typedef std::size_t     size_type;
        -:   60:      typedef std::ptrdiff_t  difference_type;
        -:   61:#if __cplusplus <= 201703L
        -:   62:      typedef _Tp*       pointer;
        -:   63:      typedef const _Tp* const_pointer;
        -:   64:      typedef _Tp&       reference;
        -:   65:      typedef const _Tp& const_reference;
        -:   66:
        -:   67:      template<typename _Tp1>
        -:   68:	struct rebind
        -:   69:	{ typedef new_allocator<_Tp1> other; };
        -:   70:#endif
        -:   71:
        -:   72:#if __cplusplus >= 201103L
        -:   73:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   74:      // 2103. propagate_on_container_move_assignment
        -:   75:      typedef std::true_type propagate_on_container_move_assignment;
        -:   76:#endif
        -:   77:
        -:   78:      _GLIBCXX20_CONSTEXPR
     220*:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsmEEEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIdEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIdSaIdEEEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal13edit_distance8EditTypeEEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS5_EEEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISsEC2Ev:
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8internal29ParameterizedTestCaseInfoBaseEEC2Ev:
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing14TestPartResultEEC2Ev:
       93:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorImEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal9TraceInfoEEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt4pairIcPKcEEEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing12TestPropertyEEC2Ev:
       93:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestInfoEEC2Ev:
       14:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIiEC2Ev:
       15:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing17TestEventListenerEEC2Ev:
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing11EnvironmentEEC2Ev:
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestCaseEEC2Ev:
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPcEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   80:
        -:   81:      _GLIBCXX20_CONSTEXPR
       4*:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS5_EEEC2ERKS8_:
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIdSaIdEEEC2ERKS4_:
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIdEC2ERKS1_:
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISsEC2ERKS1_:
        4:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal13edit_distance8EditTypeEEC2ERKS5_:
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcEC2ERKS1_:
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   83:
        -:   84:      template<typename _Tp1>
        -:   85:	_GLIBCXX20_CONSTEXPR
        -:   86:	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        -:   87:
        -:   88:#if __cplusplus <= 201703L
       4*:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsmEEED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8internal29ParameterizedTestCaseInfoBaseEED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing14TestPartResultEED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISsED2Ev:
        4:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIdED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIdSaIdEEED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal13edit_distance8EditTypeEED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS5_EEED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorImED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal9TraceInfoEED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt4pairIcPKcEEED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing12TestPropertyEED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestInfoEED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIiED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing17TestEventListenerEED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing11EnvironmentEED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestCaseEED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPcED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEED2Ev:
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   90:
        -:   91:      pointer
        -:   92:      address(reference __x) const _GLIBCXX_NOEXCEPT
        -:   93:      { return std::__addressof(__x); }
        -:   94:
        -:   95:      const_pointer
        -:   96:      address(const_reference __x) const _GLIBCXX_NOEXCEPT
        -:   97:      { return std::__addressof(__x); }
        -:   98:#endif
        -:   99:
        -:  100:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:  101:      // about what the return value is when __n == 0.
        -:  102:      _GLIBCXX_NODISCARD _Tp*
     118*:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
     118*:  105:	if (__n > this->_M_max_size())
    #####:  106:	  std::__throw_bad_alloc();
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
     118*:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorISsE8allocateEmPKv:
        3:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        3:  105:	if (__n > this->_M_max_size())
        3:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
        3:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        3:  115-block  0
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal13edit_distance8EditTypeEE8allocateEmPKv:
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    %%%%%:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  115-block  0
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing14TestPartResultEE8allocateEmPKv:
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    %%%%%:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  115-block  0
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing12TestPropertyEE8allocateEmPKv:
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    %%%%%:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  115-block  0
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestInfoEE8allocateEmPKv:
       52:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
       52:  105:	if (__n > this->_M_max_size())
       52:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
       52:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
       52:  115-block  0
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing17TestEventListenerEE8allocateEmPKv:
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        1:  105:	if (__n > this->_M_max_size())
        1:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
        1:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  115-block  0
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing11EnvironmentEE8allocateEmPKv:
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    %%%%%:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  115-block  0
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal9TraceInfoEE8allocateEmPKv:
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    %%%%%:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  115-block  0
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestCaseEE8allocateEmPKv:
        5:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        5:  105:	if (__n > this->_M_max_size())
        5:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
        5:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        5:  115-block  0
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE8allocateEmPKv:
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    %%%%%:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  115-block  0
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorIdE8allocateEmPKv:
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    %%%%%:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  115-block  0
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIdSaIdEEE8allocateEmPKv:
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    %%%%%:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  115-block  0
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS5_EEE8allocateEmPKv:
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    %%%%%:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  115-block  0
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsmEEE8allocateEmPKv:
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    %%%%%:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  115-block  0
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorImE8allocateEmPKv:
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    %%%%%:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  115-block  0
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt4pairIcPKcEEE8allocateEmPKv:
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    %%%%%:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  115-block  0
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv:
       57:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
       57:  105:	if (__n > this->_M_max_size())
       57:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
       57:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
       57:  115-block  0
        -:  116:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPcE8allocateEmPKv:
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
    #####:  105:	if (__n > this->_M_max_size())
    %%%%%:  105-block  0
    #####:  106:	  std::__throw_bad_alloc();
    %%%%%:  106-block  0
        -:  107:
        -:  108:#if __cpp_aligned_new
        -:  109:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  110:	  {
        -:  111:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  112:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  113:	  }
        -:  114:#endif
    #####:  115:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  115-block  0
        -:  116:      }
------------------
        -:  117:
        -:  118:      // __p is not permitted to be a null pointer.
        -:  119:      void
      86*:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
      86*:  133:	::operator delete(__p
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
      86*:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing11EnvironmentEE10deallocateEPS3_m:
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
    %%%%%:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8internal29ParameterizedTestCaseInfoBaseEE10deallocateEPS4_m:
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
    %%%%%:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing14TestPartResultEE10deallocateEPS2_m:
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
    %%%%%:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorISsE10deallocateEPSsm:
        2:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
        2:  133:	::operator delete(__p
        2:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
        2:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal13edit_distance8EditTypeEE10deallocateEPS4_m:
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
    %%%%%:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmm:
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
    %%%%%:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing12TestPropertyEE10deallocateEPS2_m:
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
    %%%%%:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestInfoEE10deallocateEPS3_m:
       38:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
       38:  133:	::operator delete(__p
       38:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
       38:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim:
       42:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
       42:  133:	::operator delete(__p
       42:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
       42:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing17TestEventListenerEE10deallocateEPS3_m:
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
    %%%%%:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE10deallocateEPS2_m:
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
    %%%%%:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestCaseEE10deallocateEPS3_m:
        4:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
        4:  133:	::operator delete(__p
        4:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
        4:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPcE10deallocateEPS1_m:
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
    %%%%%:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdm:
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
    %%%%%:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIdSaIdEEE10deallocateEPS3_m:
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
    %%%%%:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS5_EEE10deallocateEPS7_m:
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
    %%%%%:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt4pairIcPKcEEE10deallocateEPS6_m:
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
    %%%%%:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal9TraceInfoEE10deallocateEPS3_m:
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
    %%%%%:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsmEEE10deallocateEPS5_m:
    #####:  120:      deallocate(_Tp* __p, size_type __t)
        -:  121:      {
        -:  122:#if __cpp_aligned_new
        -:  123:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  124:	  {
        -:  125:	    ::operator delete(__p,
        -:  126:# if __cpp_sized_deallocation
        -:  127:			      __t * sizeof(_Tp),
        -:  128:# endif
        -:  129:			      std::align_val_t(alignof(_Tp)));
        -:  130:	    return;
        -:  131:	  }
        -:  132:#endif
    #####:  133:	::operator delete(__p
    %%%%%:  133-block  0
        -:  134:#if __cpp_sized_deallocation
        -:  135:			  , __t * sizeof(_Tp)
        -:  136:#endif
        -:  137:			 );
    #####:  138:      }
------------------
        -:  139:
        -:  140:#if __cplusplus <= 201703L
        -:  141:      size_type
     234*:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
     234*:  143:      { return _M_max_size(); }
------------------
_ZNK9__gnu_cxx13new_allocatorIPcE8max_sizeEv:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
    %%%%%:  143-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv:
      114:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
      114:  143:      { return _M_max_size(); }
      114:  143-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
    %%%%%:  143-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIPN7testing8TestCaseEE8max_sizeEv:
       10:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
       10:  143:      { return _M_max_size(); }
       10:  143-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIN7testing8internal9TraceInfoEE8max_sizeEv:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
    %%%%%:  143-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIPN7testing11EnvironmentEE8max_sizeEv:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
    %%%%%:  143-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIPN7testing17TestEventListenerEE8max_sizeEv:
        2:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
        2:  143:      { return _M_max_size(); }
        2:  143-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIPN7testing8TestInfoEE8max_sizeEv:
      104:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
      104:  143:      { return _M_max_size(); }
      104:  143-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIN7testing12TestPropertyEE8max_sizeEv:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
    %%%%%:  143-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIN7testing14TestPartResultEE8max_sizeEv:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
    %%%%%:  143-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorISsE8max_sizeEv:
        4:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
        4:  143:      { return _M_max_size(); }
        4:  143-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS5_EEE8max_sizeEv:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
    %%%%%:  143-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIN7testing8internal13edit_distance8EditTypeEE8max_sizeEv:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
    %%%%%:  143-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorISt6vectorIdSaIdEEE8max_sizeEv:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
    %%%%%:  143-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv:
    #####:  142:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  143:      { return _M_max_size(); }
    %%%%%:  143-block  0
------------------
        -:  144:
        -:  145:#if __cplusplus >= 201103L
        -:  146:      template<typename _Up, typename... _Args>
        -:  147:	void
     188*:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
     188*:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
_ZN9__gnu_cxx13new_allocatorImE9constructImJmEEEvPT_DpOT0_:
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  150-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal13edit_distance8EditTypeEE9constructIS4_JRKS4_EEEvPT_DpOT0_:
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  150-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing14TestPartResultEE9constructIS2_JRKS2_EEEvPT_DpOT0_:
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  150-block  0
    %%%%%:  150-block  1
    $$$$$:  150-block  2
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing12TestPropertyEE9constructIS2_JRKS2_EEEvPT_DpOT0_:
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  150-block  0
    %%%%%:  150-block  1
    $$$$$:  150-block  2
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestInfoEE9constructIS3_JRKS3_EEEvPT_DpOT0_:
       78:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
       78:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
       78:  150-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing17TestEventListenerEE9constructIS3_JRKS3_EEEvPT_DpOT0_:
        1:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
        1:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        1:  150-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing11EnvironmentEE9constructIS3_JRKS3_EEEvPT_DpOT0_:
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  150-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal9TraceInfoEE9constructIS3_JRKS3_EEEvPT_DpOT0_:
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  150-block  0
    %%%%%:  150-block  1
    $$$$$:  150-block  2
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestCaseEE9constructIS3_JRKS3_EEEvPT_DpOT0_:
       14:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
       14:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
       14:  150-block  0
------------------
_ZN9__gnu_cxx13new_allocatorISsE9constructISsJSsEEEvPT_DpOT0_:
        3:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
        3:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        3:  150-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal9TraceInfoEE9constructIS3_JS3_EEEvPT_DpOT0_:
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  150-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIiE9constructIiJiEEEvPT_DpOT0_:
       92:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
       92:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
       92:  150-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestCaseEE9constructIS3_JS3_EEEvPT_DpOT0_:
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  150-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIPcE9constructIS1_JS1_EEEvPT_DpOT0_:
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  150-block  0
------------------
_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt4pairIcPKcEEE9constructIS5_JS5_EEEvPT_DpOT0_:
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  150-block  0
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsmEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESB_IJEEEEEvPT_DpOT0_:
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  150-block  0
    %%%%%:  150-block  1
    $$$$$:  150-block  2
    $$$$$:  150-block  3
    $$$$$:  150-block  4
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE9constructISsJRKSsEEEvPT_DpOT0_:
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  150-block  0
    %%%%%:  150-block  1
    $$$$$:  150-block  2
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing14TestPartResultEE9constructIS2_JS2_EEEvPT_DpOT0_:
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  150-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing12TestPropertyEE9constructIS2_JS2_EEEvPT_DpOT0_:
    #####:  148:	construct(_Up* __p, _Args&&... __args)
        -:  149:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    #####:  150:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  150-block  0
------------------
        -:  151:
        -:  152:      template<typename _Up>
        -:  153:	void
       1*:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
       1*:  156:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISsEE7destroyISsEEvPT_:
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
    %%%%%:  156-block  0
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSsmEEE7destroyIS4_EEvPT_:
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
    %%%%%:  156-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIPcE7destroyIS1_EEvPT_:
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorIiE7destroyIiEEvPT_:
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorImE7destroyImEEvPT_:
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorISsE7destroyISsEEvPT_:
        1:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
        1:  156:	{ __p->~_Up(); }
        1:  156-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestCaseEE7destroyIS3_EEvPT_:
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing11EnvironmentEE7destroyIS3_EEvPT_:
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing17TestEventListenerEE7destroyIS3_EEvPT_:
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestInfoEE7destroyIS3_EEvPT_:
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing12TestPropertyEE7destroyIS2_EEvPT_:
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
    %%%%%:  156-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing14TestPartResultEE7destroyIS2_EEvPT_:
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
    %%%%%:  156-block  0
------------------
_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt4pairIcPKcEEE7destroyIS5_EEvPT_:
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal13edit_distance8EditTypeEE7destroyIS4_EEvPT_:
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal9TraceInfoEE7destroyIS3_EEvPT_:
    #####:  154:	destroy(_Up* __p)
        -:  155:	noexcept(std::is_nothrow_destructible<_Up>::value)
    #####:  156:	{ __p->~_Up(); }
    %%%%%:  156-block  0
------------------
        -:  157:#else
        -:  158:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  159:      // 402. wrong new expression in [some_] allocator::construct
        -:  160:      void
        -:  161:      construct(pointer __p, const _Tp& __val)
        -:  162:      { ::new((void *)__p) _Tp(__val); }
        -:  163:
        -:  164:      void
        -:  165:      destroy(pointer __p) { __p->~_Tp(); }
        -:  166:#endif
        -:  167:#endif // ! C++20
        -:  168:
        -:  169:      template<typename _Up>
        -:  170:	friend _GLIBCXX20_CONSTEXPR bool
        -:  171:	operator==(const new_allocator&, const new_allocator<_Up>&)
        -:  172:	_GLIBCXX_NOTHROW
        -:  173:	{ return true; }
        -:  174:
        -:  175:#if __cpp_impl_three_way_comparison < 201907L
        -:  176:      template<typename _Up>
        -:  177:	friend _GLIBCXX20_CONSTEXPR bool
        -:  178:	operator!=(const new_allocator&, const new_allocator<_Up>&)
        -:  179:	_GLIBCXX_NOTHROW
        -:  180:	{ return false; }
        -:  181:#endif
        -:  182:
        -:  183:    private:
        -:  184:      _GLIBCXX_CONSTEXPR size_type
     352*:  185:      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
        -:  186:      {
        -:  187:#if __PTRDIFF_MAX__ < __SIZE_MAX__
     352*:  188:	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
        -:  189:#else
        -:  190:	return std::size_t(-1) / sizeof(_Tp);
        -:  191:#endif
        -:  192:      }
        -:  193:    };
        -:  194:
        -:  195:_GLIBCXX_END_NAMESPACE_VERSION
        -:  196:} // namespace
        -:  197:
        -:  198:#endif
